import argparse
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
import os


def encrypt_file(file_path, algorithm, key):
    # Generate a salt
    salt = os.urandom(16)

    # Derive a key from the password
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt,
        iterations=100000,
        backend=default_backend()
    )
    derived_key = kdf.derive(key.encode())

    # Open and read the file content
    with open(file_path, 'rb') as file:
        file_data = file.read()

    # Encrypt the file content
    if algorithm == 'AES':
        cipher = Cipher(algorithms.AES(derived_key), modes.CFB(os.urandom(16)), backend=default_backend())
    elif algorithm == 'DES':
        cipher = Cipher(algorithms.TripleDES(derived_key), modes.CFB(os.urandom(8)), backend=default_backend())
    else:
        raise ValueError("Unsupported algorithm")

    encryptor = cipher.encryptor()
    encrypted_data = encryptor.update(file_data) + encryptor.finalize()

    # Write the encrypted data to a new file
    encrypted_file_path = file_path + '.enc'
    with open(encrypted_file_path, 'wb') as encrypted_file:
        encrypted_file.write(salt + encrypted_data)

    print(f"File encrypted successfully. Encrypted file saved as {encrypted_file_path}")

def main():
    parser = argparse.ArgumentParser(description='Encrypt a file.')
    parser.add_argument('--file', required=True, help='Path to the file to be encrypted')
    parser.add_argument('--algorithm', required=True, choices=['AES', 'DES'], help='Encryption algorithm (AES or DES)')
    parser.add_argument('--key', required=True, help='Encryption key')
    args = parser.parse_args()

    encrypt_file(args.file, args.algorithm, args.key)

if __name__ == '__main__':
    main()

